import com.diffplug.spotless.LineEnding
import org.gradle.api.tasks.testing.logging.TestLogEvent

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    java
    alias(libs.plugins.spotless)
}

spotless {
    java {
        target("**/*.java")
        googleJavaFormat().aosp()
        lineEndings = LineEnding.UNIX
        importOrder()
        removeUnusedImports()
        leadingTabsToSpaces(4)
    }
    kotlinGradle {
        lineEndings = LineEnding.UNIX
        target("*.gradle.kts", "**/*.gradle.kts")
        ktfmt().googleStyle().configure {
            it.setBlockIndent(4)
            it.setContinuationIndent(4)
        }
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation(libs.spring.jdbc)

    testImplementation(libs.map.result.set)

    testImplementation(platform(libs.junit.bom))
    testImplementation(libs.junit.jupiter)

    testImplementation(libs.apache.commons.compress)

    testImplementation(libs.bundles.testcontainer)
    testImplementation(libs.bundles.drivers)
    testImplementation(libs.bundles.flyway)

    testRuntimeOnly(libs.junit.platform.launcher)
    testAnnotationProcessor(libs.map.result.set)
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events.addAll(listOf(TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED))
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java { toolchain { languageVersion = JavaLanguageVersion.of(17) } }
